# This is a basic workflow to help you get started with Actions

name: OS Check - dotnet and msbuild

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #- uses: actions/checkout@v3

      - name: Run dotnet --info
        run: dotnet --info

      - if: matrix.os == 'windows-latest'
        name: Check Logical cores on Windows
        shell: powershell
        run: (Get-WmiObject -Class Win32_Processor).NumberOfLogicalProcessors

      - if: matrix.os == 'ubuntu-latest'
        name: Check Logical cores on ubuntu
        run: nproc

      - if: matrix.os == 'macos-latest'
        name: Check Logical cores on MAC  
        run: sysctl -n hw.logicalcpu
        
        #MS Build is installed on windows, just not on the path :\ - https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md#net-framework
      - if: matrix.os == 'windows-latest'
        name: Add msbuild to PATH On Windows
        uses: microsoft/setup-msbuild@v1.1      
        
      - name: Run msbuild -version
        run: msbuild -version
        #Fixed by adding msbuild to path on windows :D :D worked fine on linux and mac
        #continue-on-error: true        
        
        #Official way to get installed full frameworks: https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed
        #NOTE: this is doc'd @ github: https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md#net-framework
      - if: matrix.os == 'windows-latest'
        name: Check .NET Framework Runtimes On Windows
        shell: powershell
        run: |
          Install-Module -Name DotNetVersionLister -Scope CurrentUser -Force 
          #Import-Module DotNetVersionLister
          Get-STDotNetVersion
          
      - if: matrix.os == 'windows-latest'
        name: Check NuGet Version On Windows
        continue-on-error: true
        shell: powershell
        run: Invoke-Command -ScriptBlock {nuget help} | Select -First 1
